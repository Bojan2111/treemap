/* global d3 */
/* eslint-disable max-len */

// eslint-disable-next-line no-unused-vars

const datasets = {
  kickstarter: {
    title: "Kickstarter funding",
    description: "Most pledged kickstarter campaigns by category",
    fileLink: "https://cdn.freecodecamp.org/testable-projects-fcc/data/tree_map/kickstarter-funding-data.json"
  },
  movies: {
    title: "Movie Sales",
    description: "Most sold movies by genre",
    fileLink: "https://cdn.freecodecamp.org/testable-projects-fcc/data/tree_map/movie-data.json"
  },
  games: {
    title: "Video Game Sales",
    description: "Most sold video games by platform",
    fileLink: "https://cdn.freecodecamp.org/testable-projects-fcc/data/tree_map/video-game-sales-data.json"
  }
};

let urlParams = new URLSearchParams(window.location.search);
const defaultDataset = 'games';
const dataset = datasets[urlParams.get('data') || defaultDataset];

document.getElementById('title').innerHTML = dataset.title;
document.getElementById('description').innerHTML = dataset.description;

//let body = d3.select('body');

let tooltip = d3.select("body")
  .append("div")
  .attr("id", "tooltip")
  .attr("class", "tooltip")
  .style("opacity", 0);

let svg = d3.select("#tree-map"),
    w = +svg.attr("width"),
    h = +svg.attr("height");

let fader = function (color) {
  return d3.interpolateRgb(color, '#fff')(0.2);
},
    color = d3.scaleOrdinal(d3.schemeCategory20.map(fader));
let treemap = d3.treemap().size([w, h]).paddingInner(1);
d3.json(dataset.fileLink, function(data) {
  let root = d3
    .hierarchy(data)
    .eachBefore((d) => {
      d.data.id = (d.parent ? d.parent.data.id + '.' : '') + d.data.name;
    })
    .sum(sumBySize)
    .sort(function (a, b) {
      return b.height - a.height || b.value - a.value;
    });
  treemap(root);
  let cell = svg
    .selectAll("g")
    .data(root.leaves())
    .enter()
    .append("g")
    .attr("class", "group")
    .attr("transform", (d) => {
      return 'translate(' + d.x0 + ',' + d.y0 + ')';
    });
  cell.append("rect")
    .attr("id", (d) => d.data.id)
    .attr("class", "tile")
    .attr("width", (d) => d.x1 - d.x0)
    .attr("height", (d) => d.y1 - d.x0)
    .attr("data-name", (d) => d.data.name)
    .attr("data-category", (d) => d.data.category)
    .attr("data-value", (d) => d.data.value)
    .attr("fill", (d) => color(d.data.category))
    .on("mousemove", (d) => {
      tooltip.style("opacity", 0.9);
      tooltip
        .html(
          "Name: " +
            d.data.name +
            "<br>Category: " +
            d.data.category +
            "<br>Value: " +
            d.data.value
        )
        .attr("data-value", d.data.value)
        .style("left", d3.event.pageX + 10 + "px")
        .style("top", d3.event.pageY - 28 + "px");
    })
    .on('mouseout', function () {
      tooltip.style("opacity", 0);
    });
  
  cell
    .append("text")
    .attr("class", "tile-text")
    .selectAll("tspan")
    .data((d) => d.data.name.split(/(?=[A-Z][^A-Z])/g))
    .enter()
    .append('tspan')
    .attr('x', 4)
    .attr('y', (d, i) => 13 + i * 10)
    .text((d) => d)
  
  let categories = root.leaves().map((nodes) => nodes.data.category);
  categories = categories.filter((category, index, self) => self.indexOf(category) === index);
  let legend = d3.select('#legend');
  let legendWidth = +legend.attr('width');
  const legendOffset = 10;
  const legendRectSize = 15;
  const legendHSpacing = 150;
  const legendVSpacing = 10;
  const legendTextXOffset = 3;
  const legendTextYOffset = -2;
  const legendElemsPerRow = Math.floor(legendWidth / legendHSpacing);
  let legendElem = legend
    .append('g')
    .attr('transform', 'translate(60,' + legendOffset + ')')
    .selectAll('g')
    .data(categories)
    .enter()
    .append('g')
    .attr('transform', (d, i) => {
      return (
        'translate(' +
        (i % legendElemsPerRow) + legendHSpacing + ',' +
        (Math.floor(i / legendElemsPerRow) * legendRectSize + legendVSpacing * Math.floor(i / legendElemsPerRow)) + ')');
    });
  legendElem
    .append('rect')
    .attr("width", legendRectSize)
    .attr("height", legendRectSize)
    .attr("class", "legend-item")
    .attr("fill", (d) => color(d))
  
  legendElem
    .append('text')
    .attr('x', legendRectSize + legendTextXOffset)
    .attr('y', legendRectSize + legendTextYOffset)
    .text((d) => d)
});

function sumBySize(d) {
  return d.value;
}